version: "3.8"

services:
  api:
    build:
      context: .
      target: dev
    container_name: go_mysql_crud_api
    volumes:
      - ./:/go/src/github.com/golang-ddd-postgreql-auth
  #  environment:
      #   - GOOGLE_APPLICATION_CREDENTIALS=credentials.json
      #- VIRTUAL_PORT=80
      #- VIRTUAL_HOST=golang-ddd-postgreql-auth.docker.dev
    env_file:
      - configuration/env/dev.env
    ports:
      - 8080:8080
    depends_on:
      - db
      - redis

  redis:
    image: redis:alpine
    container_name: cache
    ports:
      - ${HOST_PORT_REDIS}:${CONTAINER_PORT_REDIS}
    volumes:
      - ./redis-data:/data
  #    networks:
  #      - common_network

  db:
    image: postgres:18-alpine3.22
    restart: always
    environment:
      - POSTGRES_DB=test_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DB_SCHEMA=postgres
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres
      - SECRET=SECRET
    logging:
      options:
        max-size: 10m
        max-file: '10' # good
    ports:
      - ${HOST_PORT}:${CONTAINER_PORT}
    volumes:
      # chmod +x ./postgres-initdb.sh
      # chmod +x ./sql
      # any problem exec : docker-compose down --volumes; docker volume prune
      #- postgres-data2:/var/lib/postgresql/_data
      - postgresql_data:/var/lib/postgresql/data
      - ./postgres-initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      # copy the sql script to fill tables
      - ./sql/fill_tables.sql:/docker-entrypoint-initdb.d/fill_tables.sql
    security_opt:
      - seccomp:unconfined
    cap_add:
      - SYS_NICE
    healthcheck:
      #CHANGE 1: this command checks if the database is ready, right on the source db server
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
  #    networks:
  #      - common_network

  #networks:
  #  common_network:

  #volumes:
  #  postgres-data2:

volumes:
  postgresql_data:
    driver: local

networks:
  postgres_network:
    driver: bridge

    #   image: mysql:8.0.16
    #   environment:
    #     - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    #     - MYSQL_DATABASE=${MYSQL_DATABASE}
    #     - MYSQL_USER=${MYSQL_USER}
    #     - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    #   container_name: go_mysql_crud_db
    #   ports:
    #     - 3306:3306
    #   volumes:
    #     - ./test.sql:/docker-entrypoint-initdb.d/test.sql
